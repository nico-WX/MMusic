//
//  ButtonStyleKit.m
//  ProjectName
//
//  Created by AuthorName on 2019/1/14.
//  Copyright Â© 2019 CompanyName. All rights reserved.
//
//  Generated by PaintCode
//  http://www.paintcodeapp.com
//

#import "ButtonStyleKit.h"


@implementation ButtonStyleKit

#pragma mark Cache

static UIColor* _color = nil;

#pragma mark Initialization

+ (void)initialize
{
    // Colors Initialization
    _color = [UIColor colorWithRed: 0.513 green: 0.684 blue: 0.626 alpha: 1];

}

#pragma mark Colors

+ (UIColor*)color { return _color; }

#pragma mark Drawing Methods

+ (void)drawOnCanvas
{
    [ButtonStyleKit drawOnCanvasWithFrame: CGRectMake(0, 0, 60, 54) resizing: ButtonStyleKitResizingBehaviorStretch];
}

+ (void)drawOnCanvasWithFrame: (CGRect)targetFrame resizing: (ButtonStyleKitResizingBehavior)resizing
{
    //// General Declarations
    CGContextRef context = UIGraphicsGetCurrentContext();
    
    //// Resize to Target Frame
    CGContextSaveGState(context);
    CGRect resizedFrame = ButtonStyleKitResizingBehaviorApply(resizing, CGRectMake(0, 0, 60, 54), targetFrame);
    CGContextTranslateCTM(context, resizedFrame.origin.x, resizedFrame.origin.y);
    CGContextScaleCTM(context, resizedFrame.size.width / 60, resizedFrame.size.height / 54);


    //// Color Declarations
    UIColor* fillColor = [UIColor colorWithRed: 0.937 green: 0 blue: 0 alpha: 1];

    //// Page
    {
        //// OnShape Drawing
        UIBezierPath* onShapePath = [UIBezierPath bezierPath];
        [onShapePath moveToPoint: CGPointMake(60.04, 18.14)];
        [onShapePath addCurveToPoint: CGPointMake(42.56, 0.02) controlPoint1: CGPointMake(60.04, 8.15) controlPoint2: CGPointMake(52.19, 0.02)];
        [onShapePath addCurveToPoint: CGPointMake(30.04, 5.57) controlPoint1: CGPointMake(37.8, 0.02) controlPoint2: CGPointMake(33.3, 2.07)];
        [onShapePath addCurveToPoint: CGPointMake(17.53, 0.02) controlPoint1: CGPointMake(26.79, 2.07) controlPoint2: CGPointMake(22.28, 0.02)];
        [onShapePath addCurveToPoint: CGPointMake(0.04, 18.14) controlPoint1: CGPointMake(7.89, 0.02) controlPoint2: CGPointMake(0.04, 8.15)];
        [onShapePath addCurveToPoint: CGPointMake(0.1, 19.02) controlPoint1: CGPointMake(0.04, 18.48) controlPoint2: CGPointMake(0.08, 18.77)];
        [onShapePath addCurveToPoint: CGPointMake(0.09, 19.27) controlPoint1: CGPointMake(0.1, 19.1) controlPoint2: CGPointMake(0.09, 19.18)];
        [onShapePath addCurveToPoint: CGPointMake(1.37, 25.04) controlPoint1: CGPointMake(0.09, 21.03) controlPoint2: CGPointMake(0.52, 22.98)];
        [onShapePath addCurveToPoint: CGPointMake(1.45, 25.26) controlPoint1: CGPointMake(1.39, 25.12) controlPoint2: CGPointMake(1.42, 25.19)];
        [onShapePath addCurveToPoint: CGPointMake(28.16, 53.38) controlPoint1: CGPointMake(6.78, 38.02) controlPoint2: CGPointMake(27.29, 52.7)];
        [onShapePath addCurveToPoint: CGPointMake(29.99, 54) controlPoint1: CGPointMake(28.7, 53.79) controlPoint2: CGPointMake(29.35, 54)];
        [onShapePath addCurveToPoint: CGPointMake(31.85, 53.36) controlPoint1: CGPointMake(30.65, 54) controlPoint2: CGPointMake(31.3, 53.79)];
        [onShapePath addCurveToPoint: CGPointMake(57.03, 28.31) controlPoint1: CGPointMake(32.59, 52.78) controlPoint2: CGPointMake(50.09, 40.2)];
        [onShapePath addCurveToPoint: CGPointMake(57.66, 27.18) controlPoint1: CGPointMake(57.29, 27.91) controlPoint2: CGPointMake(57.49, 27.52)];
        [onShapePath addCurveToPoint: CGPointMake(57.83, 26.86) controlPoint1: CGPointMake(57.72, 27.07) controlPoint2: CGPointMake(57.77, 26.97)];
        [onShapePath addLineToPoint: CGPointMake(57.85, 26.82)];
        [onShapePath addCurveToPoint: CGPointMake(57.92, 26.7) controlPoint1: CGPointMake(57.87, 26.78) controlPoint2: CGPointMake(57.9, 26.73)];
        [onShapePath addCurveToPoint: CGPointMake(58.93, 24.4) controlPoint1: CGPointMake(58.34, 25.89) controlPoint2: CGPointMake(58.67, 25.14)];
        [onShapePath addCurveToPoint: CGPointMake(60.01, 19.27) controlPoint1: CGPointMake(59.65, 22.52) controlPoint2: CGPointMake(60.01, 20.84)];
        [onShapePath addCurveToPoint: CGPointMake(59.99, 18.95) controlPoint1: CGPointMake(60.01, 19.15) controlPoint2: CGPointMake(60, 19.04)];
        [onShapePath addCurveToPoint: CGPointMake(60.04, 18.14) controlPoint1: CGPointMake(60.02, 18.75) controlPoint2: CGPointMake(60.04, 18.47)];
        [onShapePath closePath];
        [fillColor setFill];
        [onShapePath fill];
    }
    
    CGContextRestoreGState(context);

}

+ (void)drawOffCanvas
{
    [ButtonStyleKit drawOffCanvasWithFrame: CGRectMake(0, 0, 60, 54) resizing: ButtonStyleKitResizingBehaviorStretch];
}

+ (void)drawOffCanvasWithFrame: (CGRect)targetFrame resizing: (ButtonStyleKitResizingBehavior)resizing
{
    //// General Declarations
    CGContextRef context = UIGraphicsGetCurrentContext();
    
    //// Resize to Target Frame
    CGContextSaveGState(context);
    CGRect resizedFrame = ButtonStyleKitResizingBehaviorApply(resizing, CGRectMake(0, 0, 60, 54), targetFrame);
    CGContextTranslateCTM(context, resizedFrame.origin.x, resizedFrame.origin.y);
    CGContextScaleCTM(context, resizedFrame.size.width / 60, resizedFrame.size.height / 54);


    //// Page
    {
        //// OnShape Drawing
        UIBezierPath* onShapePath = [UIBezierPath bezierPath];
        [onShapePath moveToPoint: CGPointMake(60.04, 18.14)];
        [onShapePath addCurveToPoint: CGPointMake(42.56, 0.02) controlPoint1: CGPointMake(60.04, 8.15) controlPoint2: CGPointMake(52.19, 0.02)];
        [onShapePath addCurveToPoint: CGPointMake(30.04, 5.57) controlPoint1: CGPointMake(37.8, 0.02) controlPoint2: CGPointMake(33.3, 2.07)];
        [onShapePath addCurveToPoint: CGPointMake(17.53, 0.02) controlPoint1: CGPointMake(26.79, 2.07) controlPoint2: CGPointMake(22.28, 0.02)];
        [onShapePath addCurveToPoint: CGPointMake(0.04, 18.14) controlPoint1: CGPointMake(7.89, 0.02) controlPoint2: CGPointMake(0.04, 8.15)];
        [onShapePath addCurveToPoint: CGPointMake(0.1, 19.02) controlPoint1: CGPointMake(0.04, 18.48) controlPoint2: CGPointMake(0.08, 18.77)];
        [onShapePath addCurveToPoint: CGPointMake(0.09, 19.27) controlPoint1: CGPointMake(0.1, 19.1) controlPoint2: CGPointMake(0.09, 19.18)];
        [onShapePath addCurveToPoint: CGPointMake(1.37, 25.04) controlPoint1: CGPointMake(0.09, 21.03) controlPoint2: CGPointMake(0.52, 22.98)];
        [onShapePath addCurveToPoint: CGPointMake(1.45, 25.26) controlPoint1: CGPointMake(1.39, 25.12) controlPoint2: CGPointMake(1.42, 25.19)];
        [onShapePath addCurveToPoint: CGPointMake(28.16, 53.38) controlPoint1: CGPointMake(6.78, 38.02) controlPoint2: CGPointMake(27.29, 52.7)];
        [onShapePath addCurveToPoint: CGPointMake(29.99, 54) controlPoint1: CGPointMake(28.7, 53.79) controlPoint2: CGPointMake(29.35, 54)];
        [onShapePath addCurveToPoint: CGPointMake(31.85, 53.36) controlPoint1: CGPointMake(30.65, 54) controlPoint2: CGPointMake(31.3, 53.79)];
        [onShapePath addCurveToPoint: CGPointMake(57.03, 28.31) controlPoint1: CGPointMake(32.59, 52.78) controlPoint2: CGPointMake(50.09, 40.2)];
        [onShapePath addCurveToPoint: CGPointMake(57.66, 27.18) controlPoint1: CGPointMake(57.29, 27.91) controlPoint2: CGPointMake(57.49, 27.52)];
        [onShapePath addCurveToPoint: CGPointMake(57.83, 26.86) controlPoint1: CGPointMake(57.72, 27.07) controlPoint2: CGPointMake(57.77, 26.97)];
        [onShapePath addLineToPoint: CGPointMake(57.85, 26.82)];
        [onShapePath addCurveToPoint: CGPointMake(57.92, 26.7) controlPoint1: CGPointMake(57.87, 26.78) controlPoint2: CGPointMake(57.9, 26.73)];
        [onShapePath addCurveToPoint: CGPointMake(58.93, 24.4) controlPoint1: CGPointMake(58.34, 25.89) controlPoint2: CGPointMake(58.67, 25.14)];
        [onShapePath addCurveToPoint: CGPointMake(60.01, 19.27) controlPoint1: CGPointMake(59.65, 22.52) controlPoint2: CGPointMake(60.01, 20.84)];
        [onShapePath addCurveToPoint: CGPointMake(59.99, 18.95) controlPoint1: CGPointMake(60.01, 19.15) controlPoint2: CGPointMake(60, 19.04)];
        [onShapePath addCurveToPoint: CGPointMake(60.04, 18.14) controlPoint1: CGPointMake(60.02, 18.75) controlPoint2: CGPointMake(60.04, 18.47)];
        [onShapePath closePath];
        [ButtonStyleKit.color setFill];
        [onShapePath fill];
    }
    
    CGContextRestoreGState(context);

}

+ (void)drawPreviousCanvas
{
    [ButtonStyleKit drawPreviousCanvasWithFrame: CGRectMake(0, 0, 80, 80) resizing: ButtonStyleKitResizingBehaviorStretch];
}

+ (void)drawPreviousCanvasWithFrame: (CGRect)targetFrame resizing: (ButtonStyleKitResizingBehavior)resizing
{
    //// General Declarations
    CGContextRef context = UIGraphicsGetCurrentContext();
    
    //// Resize to Target Frame
    CGContextSaveGState(context);
    CGRect resizedFrame = ButtonStyleKitResizingBehaviorApply(resizing, CGRectMake(0, 0, 80, 80), targetFrame);
    CGContextTranslateCTM(context, resizedFrame.origin.x, resizedFrame.origin.y);
    CGContextScaleCTM(context, resizedFrame.size.width / 80, resizedFrame.size.height / 80);


    //// Color Declarations
    UIColor* fillColor2 = [UIColor colorWithRed: 0 green: 0 blue: 0 alpha: 1];

    //// iPhone-8
    {
        //// Previous
        {
            //// path-1 Drawing


            //// Mask
            {
            }


            //// Play
            {
                //// Group 6
                {
                    //// Play 2 Drawing
                    UIBezierPath* play2Path = [UIBezierPath bezierPath];
                    [play2Path moveToPoint: CGPointMake(35.5, 40.87)];
                    [play2Path addLineToPoint: CGPointMake(62.5, 56.45)];
                    [play2Path addCurveToPoint: CGPointMake(63.87, 56.09) controlPoint1: CGPointMake(62.98, 56.73) controlPoint2: CGPointMake(63.59, 56.57)];
                    [play2Path addCurveToPoint: CGPointMake(64, 55.59) controlPoint1: CGPointMake(63.95, 55.94) controlPoint2: CGPointMake(64, 55.76)];
                    [play2Path addLineToPoint: CGPointMake(64, 24.41)];
                    [play2Path addCurveToPoint: CGPointMake(63, 23.41) controlPoint1: CGPointMake(64, 23.86) controlPoint2: CGPointMake(63.55, 23.41)];
                    [play2Path addCurveToPoint: CGPointMake(62.5, 23.55) controlPoint1: CGPointMake(62.82, 23.41) controlPoint2: CGPointMake(62.65, 23.46)];
                    [play2Path addLineToPoint: CGPointMake(35.5, 39.13)];
                    [play2Path addCurveToPoint: CGPointMake(35.13, 40.5) controlPoint1: CGPointMake(35.02, 39.41) controlPoint2: CGPointMake(34.86, 40.02)];
                    [play2Path addCurveToPoint: CGPointMake(35.5, 40.87) controlPoint1: CGPointMake(35.22, 40.65) controlPoint2: CGPointMake(35.35, 40.78)];
                    [play2Path closePath];
                    play2Path.usesEvenOddFillRule = YES;
                    [fillColor2 setFill];
                    [play2Path fill];


                    //// path-3 Drawing


                    //// path- Drawing
                    UIBezierPath* pathPath = [UIBezierPath bezierPath];
                    [pathPath moveToPoint: CGPointMake(7.5, 40.87)];
                    [pathPath addLineToPoint: CGPointMake(34.5, 56.45)];
                    [pathPath addCurveToPoint: CGPointMake(35.87, 56.09) controlPoint1: CGPointMake(34.98, 56.73) controlPoint2: CGPointMake(35.59, 56.57)];
                    [pathPath addCurveToPoint: CGPointMake(36, 55.59) controlPoint1: CGPointMake(35.95, 55.94) controlPoint2: CGPointMake(36, 55.76)];
                    [pathPath addLineToPoint: CGPointMake(36, 24.41)];
                    [pathPath addCurveToPoint: CGPointMake(35, 23.41) controlPoint1: CGPointMake(36, 23.86) controlPoint2: CGPointMake(35.55, 23.41)];
                    [pathPath addCurveToPoint: CGPointMake(34.5, 23.55) controlPoint1: CGPointMake(34.82, 23.41) controlPoint2: CGPointMake(34.65, 23.46)];
                    [pathPath addLineToPoint: CGPointMake(7.5, 39.13)];
                    [pathPath addCurveToPoint: CGPointMake(7.13, 40.5) controlPoint1: CGPointMake(7.02, 39.41) controlPoint2: CGPointMake(6.86, 40.02)];
                    [pathPath addCurveToPoint: CGPointMake(7.5, 40.87) controlPoint1: CGPointMake(7.22, 40.65) controlPoint2: CGPointMake(7.35, 40.78)];
                    [pathPath closePath];
                    pathPath.usesEvenOddFillRule = YES;
                    [fillColor2 setFill];
                    [pathPath fill];
                }
            }
        }
    }
    
    CGContextRestoreGState(context);

}

+ (void)drawPauseCanvas
{
    [ButtonStyleKit drawPauseCanvasWithFrame: CGRectMake(0, 0, 80, 80) resizing: ButtonStyleKitResizingBehaviorStretch];
}

+ (void)drawPauseCanvasWithFrame: (CGRect)targetFrame resizing: (ButtonStyleKitResizingBehavior)resizing
{
    //// General Declarations
    CGContextRef context = UIGraphicsGetCurrentContext();
    
    //// Resize to Target Frame
    CGContextSaveGState(context);
    CGRect resizedFrame = ButtonStyleKitResizingBehaviorApply(resizing, CGRectMake(0, 0, 80, 80), targetFrame);
    CGContextTranslateCTM(context, resizedFrame.origin.x, resizedFrame.origin.y);
    CGContextScaleCTM(context, resizedFrame.size.width / 80, resizedFrame.size.height / 80);


    //// Color Declarations
    UIColor* fillColor2 = [UIColor colorWithRed: 0 green: 0 blue: 0 alpha: 1];

    //// iPhone-8
    {
        //// Pause
        {
            //// path-1 Drawing


            //// Mask
            {
            }


            //// Rectangle-4
            {
                //// Group 6
                {
                    //// Rectangle- 3 Drawing
                    UIBezierPath* rectangle3Path = [UIBezierPath bezierPathWithRoundedRect: CGRectMake(45, 10, 20, 60) cornerRadius: 4];
                    [fillColor2 setFill];
                    [rectangle3Path fill];


                    //// path-3 Drawing


                    //// path- Drawing
                    UIBezierPath* pathPath = [UIBezierPath bezierPathWithRoundedRect: CGRectMake(15, 10, 20, 60) cornerRadius: 4];
                    [fillColor2 setFill];
                    [pathPath fill];
                }
            }
        }
    }
    
    CGContextRestoreGState(context);

}

+ (void)drawStopCanvas
{
    [ButtonStyleKit drawStopCanvasWithFrame: CGRectMake(0, 0, 80, 80) resizing: ButtonStyleKitResizingBehaviorStretch];
}

+ (void)drawStopCanvasWithFrame: (CGRect)targetFrame resizing: (ButtonStyleKitResizingBehavior)resizing
{
    //// General Declarations
    CGContextRef context = UIGraphicsGetCurrentContext();
    
    //// Resize to Target Frame
    CGContextSaveGState(context);
    CGRect resizedFrame = ButtonStyleKitResizingBehaviorApply(resizing, CGRectMake(0, 0, 80, 80), targetFrame);
    CGContextTranslateCTM(context, resizedFrame.origin.x, resizedFrame.origin.y);
    CGContextScaleCTM(context, resizedFrame.size.width / 80, resizedFrame.size.height / 80);


    //// Color Declarations
    UIColor* fillColor2 = [UIColor colorWithRed: 0 green: 0 blue: 0 alpha: 1];

    //// iPhone-8
    {
        //// Stop
        {
            //// Rectangle-3 Drawing


            //// path-1 Drawing


            //// path- Drawing
            UIBezierPath* pathPath = [UIBezierPath bezierPathWithRoundedRect: CGRectMake(10, 10, 60, 60) cornerRadius: 4];
            [fillColor2 setFill];
            [pathPath fill];
        }
    }
    
    CGContextRestoreGState(context);

}

+ (void)drawNextCanvas
{
    [ButtonStyleKit drawNextCanvasWithFrame: CGRectMake(0, 0, 80, 80) resizing: ButtonStyleKitResizingBehaviorStretch];
}

+ (void)drawNextCanvasWithFrame: (CGRect)targetFrame resizing: (ButtonStyleKitResizingBehavior)resizing
{
    //// General Declarations
    CGContextRef context = UIGraphicsGetCurrentContext();
    
    //// Resize to Target Frame
    CGContextSaveGState(context);
    CGRect resizedFrame = ButtonStyleKitResizingBehaviorApply(resizing, CGRectMake(0, 0, 80, 80), targetFrame);
    CGContextTranslateCTM(context, resizedFrame.origin.x, resizedFrame.origin.y);
    CGContextScaleCTM(context, resizedFrame.size.width / 80, resizedFrame.size.height / 80);


    //// Color Declarations
    UIColor* fillColor2 = [UIColor colorWithRed: 0 green: 0 blue: 0 alpha: 1];

    //// iPhone-8
    {
        //// Next
        {
            //// path-1 Drawing


            //// Mask
            {
            }


            //// Play
            {
                //// Group 6
                {
                    //// Play 2 Drawing
                    UIBezierPath* play2Path = [UIBezierPath bezierPath];
                    [play2Path moveToPoint: CGPointMake(44.5, 40.87)];
                    [play2Path addLineToPoint: CGPointMake(17.5, 56.45)];
                    [play2Path addCurveToPoint: CGPointMake(16.13, 56.09) controlPoint1: CGPointMake(17.02, 56.73) controlPoint2: CGPointMake(16.41, 56.57)];
                    [play2Path addCurveToPoint: CGPointMake(16, 55.59) controlPoint1: CGPointMake(16.05, 55.94) controlPoint2: CGPointMake(16, 55.76)];
                    [play2Path addLineToPoint: CGPointMake(16, 24.41)];
                    [play2Path addCurveToPoint: CGPointMake(17, 23.41) controlPoint1: CGPointMake(16, 23.86) controlPoint2: CGPointMake(16.45, 23.41)];
                    [play2Path addCurveToPoint: CGPointMake(17.5, 23.55) controlPoint1: CGPointMake(17.18, 23.41) controlPoint2: CGPointMake(17.35, 23.46)];
                    [play2Path addLineToPoint: CGPointMake(44.5, 39.13)];
                    [play2Path addCurveToPoint: CGPointMake(44.87, 40.5) controlPoint1: CGPointMake(44.98, 39.41) controlPoint2: CGPointMake(45.14, 40.02)];
                    [play2Path addCurveToPoint: CGPointMake(44.5, 40.87) controlPoint1: CGPointMake(44.78, 40.65) controlPoint2: CGPointMake(44.65, 40.78)];
                    [play2Path closePath];
                    play2Path.usesEvenOddFillRule = YES;
                    [fillColor2 setFill];
                    [play2Path fill];


                    //// path-3 Drawing


                    //// path- Drawing
                    UIBezierPath* pathPath = [UIBezierPath bezierPath];
                    [pathPath moveToPoint: CGPointMake(72.5, 40.87)];
                    [pathPath addLineToPoint: CGPointMake(45.5, 56.45)];
                    [pathPath addCurveToPoint: CGPointMake(44.13, 56.09) controlPoint1: CGPointMake(45.02, 56.73) controlPoint2: CGPointMake(44.41, 56.57)];
                    [pathPath addCurveToPoint: CGPointMake(44, 55.59) controlPoint1: CGPointMake(44.05, 55.94) controlPoint2: CGPointMake(44, 55.76)];
                    [pathPath addLineToPoint: CGPointMake(44, 24.41)];
                    [pathPath addCurveToPoint: CGPointMake(45, 23.41) controlPoint1: CGPointMake(44, 23.86) controlPoint2: CGPointMake(44.45, 23.41)];
                    [pathPath addCurveToPoint: CGPointMake(45.5, 23.55) controlPoint1: CGPointMake(45.18, 23.41) controlPoint2: CGPointMake(45.35, 23.46)];
                    [pathPath addLineToPoint: CGPointMake(72.5, 39.13)];
                    [pathPath addCurveToPoint: CGPointMake(72.87, 40.5) controlPoint1: CGPointMake(72.98, 39.41) controlPoint2: CGPointMake(73.14, 40.02)];
                    [pathPath addCurveToPoint: CGPointMake(72.5, 40.87) controlPoint1: CGPointMake(72.78, 40.65) controlPoint2: CGPointMake(72.65, 40.78)];
                    [pathPath closePath];
                    pathPath.usesEvenOddFillRule = YES;
                    [fillColor2 setFill];
                    [pathPath fill];
                }
            }
        }
    }
    
    CGContextRestoreGState(context);

}

+ (void)drawPlayCanvas
{
    [ButtonStyleKit drawPlayCanvasWithFrame: CGRectMake(0, 0, 80, 80) resizing: ButtonStyleKitResizingBehaviorStretch];
}

+ (void)drawPlayCanvasWithFrame: (CGRect)targetFrame resizing: (ButtonStyleKitResizingBehavior)resizing
{
    //// General Declarations
    CGContextRef context = UIGraphicsGetCurrentContext();
    
    //// Resize to Target Frame
    CGContextSaveGState(context);
    CGRect resizedFrame = ButtonStyleKitResizingBehaviorApply(resizing, CGRectMake(0, 0, 80, 80), targetFrame);
    CGContextTranslateCTM(context, resizedFrame.origin.x, resizedFrame.origin.y);
    CGContextScaleCTM(context, resizedFrame.size.width / 80, resizedFrame.size.height / 80);


    //// Color Declarations
    UIColor* fillColor2 = [UIColor colorWithRed: 0 green: 0 blue: 0 alpha: 1];

    //// iPhone-8
    {
        //// Play
        {
            //// Rectangle-2 Drawing


            //// path-1 Drawing


            //// path- Drawing
            UIBezierPath* pathPath = [UIBezierPath bezierPath];
            [pathPath moveToPoint: CGPointMake(68.5, 40.87)];
            [pathPath addLineToPoint: CGPointMake(26.5, 65.11)];
            [pathPath addCurveToPoint: CGPointMake(25.13, 64.75) controlPoint1: CGPointMake(26.02, 65.39) controlPoint2: CGPointMake(25.41, 65.23)];
            [pathPath addCurveToPoint: CGPointMake(25, 64.25) controlPoint1: CGPointMake(25.05, 64.6) controlPoint2: CGPointMake(25, 64.42)];
            [pathPath addLineToPoint: CGPointMake(25, 15.75)];
            [pathPath addCurveToPoint: CGPointMake(26, 14.75) controlPoint1: CGPointMake(25, 15.2) controlPoint2: CGPointMake(25.45, 14.75)];
            [pathPath addCurveToPoint: CGPointMake(26.5, 14.89) controlPoint1: CGPointMake(26.18, 14.75) controlPoint2: CGPointMake(26.35, 14.8)];
            [pathPath addLineToPoint: CGPointMake(68.5, 39.13)];
            [pathPath addCurveToPoint: CGPointMake(68.87, 40.5) controlPoint1: CGPointMake(68.98, 39.41) controlPoint2: CGPointMake(69.14, 40.02)];
            [pathPath addCurveToPoint: CGPointMake(68.5, 40.87) controlPoint1: CGPointMake(68.78, 40.65) controlPoint2: CGPointMake(68.65, 40.78)];
            [pathPath closePath];
            pathPath.usesEvenOddFillRule = YES;
            [fillColor2 setFill];
            [pathPath fill];
        }
    }
    
    CGContextRestoreGState(context);

}

@end



CGRect ButtonStyleKitResizingBehaviorApply(ButtonStyleKitResizingBehavior behavior, CGRect rect, CGRect target)
{
    if (CGRectEqualToRect(rect, target) || CGRectEqualToRect(target, CGRectZero))
        return rect;

    CGSize scales = CGSizeZero;
    scales.width = ABS(target.size.width / rect.size.width);
    scales.height = ABS(target.size.height / rect.size.height);

    switch (behavior)
    {
        case ButtonStyleKitResizingBehaviorAspectFit:
        {
            scales.width = MIN(scales.width, scales.height);
            scales.height = scales.width;
            break;
        }
        case ButtonStyleKitResizingBehaviorAspectFill:
        {
            scales.width = MAX(scales.width, scales.height);
            scales.height = scales.width;
            break;
        }
        case ButtonStyleKitResizingBehaviorStretch:
            break;
        case ButtonStyleKitResizingBehaviorCenter:
        {
            scales.width = 1;
            scales.height = 1;
            break;
        }
    }

    CGRect result = CGRectStandardize(rect);
    result.size.width *= scales.width;
    result.size.height *= scales.height;
    result.origin.x = target.origin.x + (target.size.width - result.size.width) / 2;
    result.origin.y = target.origin.y + (target.size.height - result.size.height) / 2;
    return result;
}
